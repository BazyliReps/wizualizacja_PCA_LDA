plot(cars)
install.packages("quantmod")
library(tidyquant)
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
---
title: "Zastosowanie SOM dla danych giełdowych"
output: pdf_document
---
Dokument przedstawia zastosowanie map samoorganizujących na danych giełdowych.
```{r}
install.packages("tidyquant")
```{r}
---
title: "Zastosowanie SOM dla danych giełdowych"
output: pdf_document
---
Dokument przedstawia zastosowanie map samoorganizujących na danych giełdowych.
```{r}
install.packages("tidyquant")
```{r}
library(tidyquant)
install.packages("PerformanceAnalytics")
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
head(AAPL)
start <- as.Date("2020-01-05")
end <- as.Date("2020-10-05")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
head(AAPL)
Dokument przedstawia zastosowanie map samoorganizujących na danych giełdowych. Wykorzystano dane giełdowe z początku maja 2020, czyli obserwacje z czasów pandemii koronawirusa.
Dokument przedstawia zastosowanie map samoorganizujących na danych giełdowych. Wykorzystano dane giełdowe z początku maja 2020, czyli obserwacje z czasów pandemii koronawirusa. Do pobrania danych wykorzystano bibliotekę <emp>quantmod</emp>.
start <- as.Date("2020-01-05")
end <- as.Date("2020-10-05")
getSymbols("AMZN", src = "yahoo", from = start, to = end)
head(AMZN)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
head(AAPL)
getSymbols("UBER", src = "yahoo", from = start, to = end)
head(UBER)
getSymbols("PKN", src = "yahoo", from = start, to = end)
getSymbols("SPOT", src = "yahoo", from = start, to = end)
getSymbols("SPOT", src = "yahoo", from = start, to = end)
head(SPOT)
Dokument przedstawia zastosowanie map samoorganizujących na danych giełdowych. Wykorzystano dane giełdowe z początku maja 2020, czyli obserwacje z czasów pandemii koronawirusa. Do pobrania danych wykorzystano bibliotekę quantmod. Analizie poddano dane spółek Amazon (AMZN), Apple (AAPL), Uber (UBER), Netflix (NFLX), Spotify (SPOT).
```{r}
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
```{r}
start <- as.Date("2020-01-05")
end <- as.Date("2020-10-05")
getSymbols("SPOT", src = "yahoo", from = start, to = end)
head(SPOT)
---
title: "Zastosowanie SOM dla danych giełdowych"
author: "Knigawa"
output: pdf_document
---
---
title: "Zastosowanie SOM dla danych giełdowych"
author: "Łukasz Knigawka, Bazyli Reps"
output: pdf_document
---
end <- as.Date("2020-30-05")
end <- as.Date("2020-30-05")
start <- as.Date("2020-01-01")
end <- as.Date("2020-05-01")
getSymbols("AMZN", src = "yahoo", from = start, to = end)
getSymbols("UBER", src = "yahoo", from = start, to = end)
getSymbols("UBER", src = "yahoo", from = start, to = end)
getSymbols("NFLX", src = "yahoo", from = start, to = end)
getSymbols("UBER", src = "yahoo", from = start, to = end)
getSymbols("NFLX", src = "yahoo", from = start, to = end)
getSymbols("SPOT", src = "yahoo", from = start, to = end)
getSymbols("NFLX", src = "yahoo", from = start, to = end)
getSymbols("SPOT", src = "yahoo", from = start, to = end)
head(SPOT)
getSymbols("AMZN", src = "yahoo", from = start, to = end)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
getSymbols("UBER", src = "yahoo", from = start, to = end)
getSymbols("NFLX", src = "yahoo", from = start, to = end)
getSymbols("SPOT", src = "yahoo", from = start, to = end)
head(SPOT)
```{r}
plot(AAPL[, "AAPL.Close"], main = "AAPL")
plot(AAPL[, "AAPL.Close"], main = "AAPL")
plot(SPOT[, "SPOT.Close"], main = "SPOT")
plot(AMZN[, "AMZN.Close"], main = "AMZN")
plot(AAPL[, "AAPL.Close"], main = "AAPL")
plot(UBER[, "UBER.Close"], main = "UBER")
plot(NFLX[, "NFLX.Close"], main = "NFLX")
plot(SPOT[, "SPOT.Close"], main = "SPOT")
```{r}
getSymbols("AMZN", src = "yahoo", from = start, to = end)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
getSymbols("UBER", src = "yahoo", from = start, to = end)
getSymbols("NFLX", src = "yahoo", from = start, to = end)
getSymbols("SPOT", src = "yahoo", from = start, to = end)
head(SPOT)
Sprawdźmy jeszcze na wspólnym wykresie jak prezentowały się ceny akcji wybranych spółek.
```{r}
stocks <- as.xts(data.frame(AMZN = AMZN[, "AMZN.Close"], AAPL = AAPL[, "AAPL.Close"], UBER = UBER[, "UBER.Close"], NFLX = NFLX[, "NFLX.Close"], SPOT = SPOT[, "SPOT.Close"]))
```
head(stocks)
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price")
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price")
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price", col = heat.colors(10))
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price", col = heat.colors(10))
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price", col = topo.colors(10))
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price", col = topo.colors(10))
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5)
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5, col = topo.colors(10))
plot(as.zoo(stocks), screens = 1, lty = 1:5, xlab = "Date", ylab = "Price", col = topo.colors(10))
legend("right", c("AMZN", "AAPL", "UBER", "NFLX", "SPOT"), lty = 1:3, cex = 0.5, col = topo.colors(10))
head(AMZN)
head(AMZN, 10)
AMZN.measures <- c("Open")
AMZN.measures <- c("Open")
AMZN.measures
head(AMZN.measures)
AMZN.measures <- c("Open")
head(AMZN.measures)
```{r}
AMZN.measures <- c("Open, High, Low, Close, Volume, Adjusted")
install.packages("kohonen")
```{r}
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
if (!require("kohonen")) {
install.packages("kohonen")
library(kohonen)
}
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
if (!require("kohonen")) {
install.packages("kohonen")
library(kohonen)
}
AMZN.sc = scale(AMZN[, 1:6])
AMZN.measures <- c("Open, High, Low, Close, Volume, Adjusted")
AMZN.sc = scale(AMZN[, 1:6])
head(AMZN.sc)
Przeskalowano dane przed wykorzystaniem ich do analizy map samoorganizujących.
```{r}
AMZN.measures <- c("Open, High, Low, Close, Volume, Adjusted")
AMZN.sc = scale(AMZN[, 1:6])
head(AMZN.sc)
```
```{r}
```{r}
AMZN.measures <- c("Open, High, Low, Close, Volume, Adjusted")
AMZN.sc = scale(AMZN[, 1:6])
head(AMZN.sc)
AMZN.measures <- c("Open, High, Low, Close, Volume, Adjusted")
AMZN.sc = scale(AMZN[, 1:6])
head(AMZN.sc)
```{r}
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
```{r}
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=100, alpha=c(0.05,0.01))
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=100, alpha=c(0.05,0.01))
plot(AMZN.som, type="changes")
Przeskalowano dane przed wykorzystaniem ich do analizy map samoorganizujących. Do wykonania analizy wykorzystano bibliotekę kohonen.
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=1000, alpha=c(0.05,0.01))
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=1000, alpha=c(0.05,0.01))
```{r}
```{r}
```{r}
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=1000, alpha=c(0.05,0.01))
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=1000, alpha=c(0.05,0.01))
```{r}
```{r}
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=100, alpha=c(0.05,0.01))
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=100, alpha=c(0.05,0.01))
```{r}
```{r}
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=200, alpha=c(0.05,0.01))
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=200, alpha=c(0.05,0.01))
```{r}
```{r}
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=100, alpha=c(0.05,0.01))
AMZN.grid = somgrid(xdim = 7, ydim=7, topo="hexagonal")
AMZN.som = som(AMZN.sc, grid=AMZN.grid, rlen=100, alpha=c(0.05,0.01))
```{r}
```{r}
```{r}
```{r}
plot(AMZN.som, type="count")
Pakiet kohonen umożliwia przedstawienie wykresu na którym widać, ile obserwacji trafiło do której komórki.
```{r}
plot(AMZN.som, type="count")
plot(AMZN.som, type="count")
plot(AMZN.som, type="dist.neighbours")
plot(AMZN.som, type="dist.neighbours")
Poniższy wykres przedstawia odległości komórek od najbliższych sąsiadów. Taka wizualizaca nosi także nazwę U-macierzy.
```{r}
plot(AMZN.som, type="dist.neighbours")
plot(AMZN.som, type="codes")
Poniższy wykres przedstawia charakterystykę obserwacji znajdujących się w danych komórkach.
iris.hc = cutree(hclust(dist(AMZN.som$codes)))
# plot
plot(AMZN.som, type="codes", bgcol=rainbow(groups)[AMZN.hc])
#cluster boundaries
add.cluster.boundaries(AMZN.som, AMZN.hc)
#cluster boundaries
add.cluster.boundaries(AMZN.som, AMZN.hc)
groups = NULL
iris.hc = cutree(hclust(dist(AMZN.som$codes)), groups)
groups = 3
iris.hc = cutree(hclust(dist(AMZN.som$codes)), groups)
# plot
plot(AMZN.som, type="codes", bgcol=rainbow(groups)[AMZN.hc])
#cluster boundaries
add.cluster.boundaries(AMZN.som, AMZN.hc)
#cluster boundaries
add.cluster.boundaries(AMZN.som, AMZN.hc)
#cluster boundaries
add.cluster.boundaries(AMZN.som, AMZN.hc)
groups = 3
iris.hc = cutree(hclust(dist(AMZN.som$codes)), groups)
```{r}
plot(AMZN.som, type="codes")
